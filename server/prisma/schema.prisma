generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(uuid())
  username               String                @default("admin")
  password               String
  first_name             String?
  last_name              String?
  middle_name            String?
  spot_id                String?
  role                   UserRole
  spot                   Spot?                 @relation(fields: [spot_id], references: [id])
  // cars                   Car[]
  car                    Car?                  @relation(fields: [car_id], references: [id])
  car_id                 String?
  push_notification_subs PushNotificationSub[]
  refresh_token          String?
  created_at             DateTime              @default(now())

  @@map("users")
}

model Car {
  id           String   @id @default(uuid())
  number_plate String
  capability   Float    @default(0)
  users        User[]
  routes       Route[]
  created_at   DateTime @default(now())

  @@map("cars")
}

model Route {
  id                     String      @id @default(uuid())
  start_spot_text        String?
  status                 RouteStatus @default(STATUS_ACTIVE)
  end_spot_id            String?
  end_spot               Spot?       @relation(fields: [end_spot_id], references: [id])
  car                    Car?        @relation(fields: [car_id], references: [id])
  car_id                 String?
  add_tanks5_capability  Float       @default(0)
  add_tanks13_capability Float       @default(0)
  add_tanks19_capability Float       @default(0)
  add_capability         Float       @default(0)
  start_date             DateTime?   @default(now())
  end_date               DateTime?
  created_at             DateTime    @default(now())

  @@map("routes")
}

model Spot {
  id                 String   @id @default(uuid())
  coordinates        String?
  address_name       String
  capability         Float    @default(0)
  max_capability     Float    @default(0)
  tanks5_capability  Float    @default(0)
  tanks13_capability Float    @default(0)
  tanks19_capability Float    @default(0)
  users              User[]
  routes             Route[]
  created_at         DateTime @default(now())

  @@map("spots")
}

model PushNotification {
  id         String              @id @default(uuid())
  title      String?
  body       String?
  status     String?             @default("STATUS_ACTIVE")
  sub        PushNotificationSub @relation(fields: [sub_id], references: [id], onDelete: Cascade)
  sub_id     String
  created_at DateTime            @default(now())
  // User       User?               @relation(fields: [userId], references: [id])
  // userId     String?

  @@map("push_notifications")
}

model PushNotificationSub {
  id                String                     @id @default(uuid())
  status            PushNotificationSubStatus? @default(STATUS_ACTIVE)
  endpoint          String
  exp_time          String?
  public_key        String
  auth_token        String
  push_notification PushNotification[]
  user              User?                      @relation(fields: [user_id], references: [id])
  user_id           String?
  created_at        DateTime                   @default(now())

  @@map("push_notifications_subs")
}

enum UserRole {
  ROLE_ADMIN
  ROLE_EMPLOYEE_SELLER
  ROLE_EMPLOYEE_DRIVER
}

enum RouteStatus {
  STATUS_ACTIVE
  STATUS_STARTED
  STATUS_WAITING
  STATUS_PAUSED
  STATUS_COMPLETED
  STATUS_CANCELLED
}

enum PushNotificationStatus {
  STATUS_ACTIVE
}

enum PushNotificationSubStatus {
  STATUS_ACTIVE
  STATUS_ARCHIVED
}
